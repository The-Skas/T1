[gd_scene load_steps=5 format=2]

[ext_resource path="res://resource/Comics/speech_bubble.png" type="Texture" id=1]
[ext_resource path="res://addons/GodotTIE/text_interface_engine.gd" type="Script" id=2]
[ext_resource path="res://addons/GodotTIE/GodotTIE_icon.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]

script/source = "extends Control

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"
onready var tie = get_node(\"TextInterfaceEngine\")
func _ready():
	# Called when the node is added to the scene for the first time.
	# Initialization here

	tie.connect(\"buff_end\", self, \"_on_buff_end\")
	tie.connect(\"state_change\", self, \"_on_state_change\")
	say(\"I am the law...\", 0.02)
	set_physics_process(true)
	pass

var stay_on_time = 1

var say_que = []

func _physics_process(delta):


	if(curr_state == tie.STATE_WAITING and say_que.size() > 0):
		var _say = say_que.pop_front()
		tie.reset()
		tie.buff_text(_say[0], _say[1])
		tie.buff_silence(_say[2])
		tie.set_state(tie.STATE_OUTPUT)

func force_say(text, speed=0.02, new_stay_on_time = stay_on_time):
	reset()
	say_que.append([text, speed, new_stay_on_time])
func say(text, speed=0.02, new_stay_on_time = stay_on_time):
	say_que.append([text, speed, new_stay_on_time])

func reset():
	say_que.clear()
	tie.reset()
	
#		yield(get_tree().create_timer(2),\"timeout\")
#		tie.reset()


#func _process(delta):
#	# Called every frame. Delta is time since last frame.
#	# Update game logic here.
#	pass

#extends Control
#
#onready var tie = get_node(\"panel/text_interface_engine\")
#
#func select_demo(i):
#	tie.reset()
#	if(i == 1):
#		# \"A Beautiful Song\"
#		# by Henrique Alves
#		tie.set_color(Color(1,1,1))
#		# Buff text: \"Text\", duration (in seconds) of each letter
#		tie.buff_text(\"This is a song, \", 0.1)
#		tie.buff_text(\"lalala\\n\", 0.2)
#		# Buff silence: Duration of the silence (in seconds)
#		tie.buff_silence(1)
#		tie.buff_text(\"It is so beautiful, \", 0.1)
#		tie.buff_text(\"lalala\\n\", 0.2)
#		tie.buff_silence(1)
#		tie.buff_text(\"I love this song, \", 0.1)
#		tie.buff_text(\"lalala\\n\", 0.2)
#		tie.buff_silence(1)
#		tie.buff_text(\"But now I'll \", 0.1) # WAIT FOR THE DROP
#		tie.buff_text(\"DROP\", 0.02) # ?????
#		tie.buff_silence(0.4)
#		tie.buff_text(\" THE BASS\\n\", 0.02) # !!!!!
#		tie.buff_silence(0.4)
#		tie.buff_text(\"TVUVTUVUTUVU WOODBODBOWBDODBO TUUVUTVU WODWVDOOWDV WODOWVOOWDVOWVD DUBDUBDUBUDUDB OWVDOWVWDOWVDOWVDOWVDWVDOWVDOWVODV\", 0.04) # I firmly believe this particular verse is my Magna Opus.
#	elif(i == 2):
#		tie.set_color(Color(1,1,0.3))
#		# If velocity is 0, than whole text is printed 
#		tie.buff_text(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras semper finibus sapien, ut fringilla nulla vehicula ac. In hac habitasse platea dictumst. Nulla lobortis tempus sem vel lobortis. Mauris facilisis mollis nunc, vitae aliquet dui dictum id. Nullam ultricies facilisis interdum. Ut id semper eros, in lobortis diam. Nam consequat, dolor pharetra imperdiet finibus, lacus turpis tincidunt velit, ut fringilla ligula orci et justo. Praesent sagittis lectus eu metus faucibus aliquam. Donec sollicitudin porttitor massa a mollis. Nulla eleifend orci lacus, et tristique dui viverra eu. Sed nec mollis ligula. Quisque eu tellus libero. Nulla id hendrerit mauris.\",0)
#	elif(i == 3):
#		tie.set_color(Color(0.3,1,1))
#		# Schedule an Input in the buffer, after all
#		# the text before it is displayed
#		tie.buff_text(\"Hey there!! What's your name?\\n\", 0.01)
#		tie.buff_input()
#	tie.set_state(tie.STATE_OUTPUT)
#
#func _ready():
#	# Add the demos in the list
#	get_node(\"demos_list\").set_focus_mode(0)
#	get_node(\"demos_list\").add_item(\"No demo\")
#	get_node(\"demos_list\").add_item(\"DEMO_Music\")
#	get_node(\"demos_list\").add_item(\"DEMO_Ipsum\")
#	get_node(\"demos_list\").add_item(\"DEMO_Input\")
#
#	# Connect every signal to check them using the \"print()\" method
#	tie.connect(\"input_enter\", self, \"_on_input_enter\")
#	tie.connect(\"buff_end\", self, \"_on_buff_end\")
#	tie.connect(\"state_change\", self, \"_on_state_change\")
#	tie.connect(\"enter_break\", self, \"_on_enter_break\")
#	tie.connect(\"resume_break\", self, \"_on_resume_break\")
#	tie.connect(\"tag_buff\", self, \"_on_tag_buff\")
#	pass
#
#func _on_demos_list_item_selected( ID ):
#	select_demo(ID)
#
#func _on_input_enter(s):
#	print(\"Input Enter \",s)
#
#	tie.add_newline()
#	tie.buff_text(\"Oooh, so your name is \" + s + \"? What a beautiful name!\", 0.01)
#	pass

func _on_buff_end():
	print(\"Buff End\")
	pass

var curr_state = 0
func _on_state_change(i):
	curr_state = i
	if(i == tie.STATE_OUTPUT):
		visible = true

	elif(i == 0 ):
		visible = false




	

	print(\"State changed: \",i)
	pass

func rewind():
	tie.reset()
	curr_state = 0
	say_que.clear()
#func _on_enter_break():
#	print(\"Enter Break\")
#	pass
#
#func _on_resume_break():
#	print(\"Resume Break\")
#	pass
#
#func _on_tag_buff(s):
#	print(\"Tag Buff \",s)
#	pass
"

[node name="panel" type="Control" index="0"]

modulate = Color( 0.960938, 0.960938, 0.960938, 1 )
self_modulate = Color( 0.949282, 0.954469, 0.964844, 1 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 200.0
margin_top = 250.0
margin_right = 200.0
margin_bottom = 250.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
script = SubResource( 1 )
_sections_unfolded = [ "Focus", "Visibility" ]

[node name="Panel" type="Panel" parent="." index="0"]

modulate = Color( 0.914062, 0.110572, 0.110572, 0.81502 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = -174.0
margin_top = -188.0
margin_right = 8.0
margin_bottom = -127.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
_sections_unfolded = [ "Visibility" ]

[node name="Sprite" type="Sprite" parent="." index="1"]

visible = false
position = Vector2( -78, -141.5 )
scale = Vector2( 0.492593, 0.238889 )
texture = ExtResource( 1 )

[node name="TextInterfaceEngine" type="ReferenceRect" parent="." index="2"]

modulate = Color( 0.941406, 0.925431, 0.685809, 1 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = -171.0
margin_top = -182.0
margin_right = 6.0
margin_bottom = -128.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
script = ExtResource( 2 )
_sections_unfolded = [ "Material", "Size Flags", "Visibility" ]
__meta__ = {
"_editor_icon": ExtResource( 3 )
}
SCROLL_ON_MAX_LINES = true
BREAK_ON_MAX_LINES = true
AUTO_SKIP_WORDS = true
LOG_SKIPPED_LINES = true
SCROLL_SKIPPED_LINES = false
FONT = null
PRINT_INPUT = true
BLINKING_INPUT = true
INPUT_CHARACTERS_LIMIT = -1


